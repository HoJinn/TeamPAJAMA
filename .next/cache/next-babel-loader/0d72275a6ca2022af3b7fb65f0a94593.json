{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { atom, selector } from 'recoil';\n/** README!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n *  select: 접미사에 Selector가 붙은 것을 사용할 것.\r\n *  update: 접미사에 AsOnlySetter이 붙은 것을 사용할 것.\r\n *  README!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n */\n\nconst LAYOUT_INIT = {\n  width: 0,\n  height: 0\n};\nexport let LayoutGrade;\n\n(function (LayoutGrade) {\n  LayoutGrade[\"XL\"] = \"xl\";\n  LayoutGrade[\"LG\"] = \"lg\";\n  LayoutGrade[\"MD\"] = \"md\";\n  LayoutGrade[\"SM\"] = \"sm\";\n  LayoutGrade[\"XS\"] = \"xs\";\n  LayoutGrade[\"UN\"] = \"un\";\n})(LayoutGrade || (LayoutGrade = {}));\n\nexport const SIZE_INFO = {\n  XS: {\n    grade: LayoutGrade.XS,\n    max: 360\n  },\n  SM: {\n    grade: LayoutGrade.SM,\n    max: 640\n  },\n  MD: {\n    grade: LayoutGrade.MD,\n    max: 960\n  },\n  LG: {\n    grade: LayoutGrade.LG,\n    max: 1280\n  },\n  XL: {\n    grade: LayoutGrade.XL\n  }\n};\nexport const windowLayoutAsOnlySetter = atom({\n  key: 'windowLayoutAsOnlySetter',\n  default: _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    scrollX: 0,\n    scrollY: 0\n  })\n});\nexport const windowLayoutSelector = selector({\n  key: 'windowLayoutSelector',\n  get: ({\n    get\n  }) => {\n    const windowLayout = get(windowLayoutAsOnlySetter);\n    const {\n      width\n    } = windowLayout;\n    return _objectSpread(_objectSpread({}, windowLayout), {}, {\n      grade: getGrade(width)\n    });\n  }\n});\nexport const headerLayoutAsOnlySetter = atom({\n  key: 'headerLayoutAsOnlySetter',\n  default: _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    position: 'relation',\n    x: 0,\n    y: 0\n  })\n});\nexport const headerLayoutSelector = selector({\n  key: 'headerLayoutSelector',\n  get: ({\n    get\n  }) => {\n    const headerLayout = get(headerLayoutAsOnlySetter);\n    const {\n      width\n    } = headerLayout;\n    return _objectSpread(_objectSpread({}, headerLayout), {}, {\n      grade: getGrade(width)\n    });\n  }\n});\nexport const navLayoutAsOnlySetter = atom({\n  key: 'navLayoutAsOnlySetter',\n  default: _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    position: 'relation',\n    x: 0,\n    y: 0\n  })\n});\nexport const navLayoutSelector = selector({\n  key: 'navLayoutSelector',\n  get: ({\n    get\n  }) => {\n    const navLayout = get(navLayoutAsOnlySetter);\n    const {\n      width\n    } = navLayout;\n    return _objectSpread(_objectSpread({}, navLayout), {}, {\n      grade: getGrade(width)\n    });\n  }\n});\nexport const contentLayoutAsOnlySetter = atom({\n  key: 'contentLayoutAsOnlySetter',\n  default: _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    position: 'relation',\n    x: 0,\n    y: 0\n  })\n});\nexport const contentLayoutSelector = selector({\n  key: 'contentLayoutSelector',\n  get: ({\n    get\n  }) => {\n    const contentLayout = get(contentLayoutAsOnlySetter);\n    const {\n      width\n    } = contentLayout;\n    return _objectSpread(_objectSpread({}, contentLayout), {}, {\n      grade: getGrade(width)\n    });\n  }\n});\nexport const footerLayoutAsOnlySetter = atom({\n  key: 'footerLayoutAsOnlySetter',\n  default: _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    position: 'relation',\n    x: 0,\n    y: 0\n  })\n});\nexport const footerLayoutSelector = selector({\n  key: 'footerLayoutSelector',\n  get: ({\n    get\n  }) => {\n    const footerLayout = get(footerLayoutAsOnlySetter);\n    const {\n      width\n    } = footerLayout;\n    return _objectSpread(_objectSpread({}, footerLayout), {}, {\n      grade: getGrade(width)\n    });\n  }\n}); //\n// ACTIONS\n//\n\nexport const getBasicLayout = node => {\n  if (!node) return _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    position: 'relation',\n    x: 0,\n    y: 0\n  });\n  const {\n    offsetWidth,\n    offsetHeight\n  } = node;\n  const {\n    position\n  } = node.style;\n  let x, y; // if(position === 'fixed' && node.style){\n  //   const {left, top} = node.style;\n  //   x = Number(left.replace(OTHER_THEN_NUMBER_AND_RELATION, EMPTY));\n  //   y = Number(top.replace(OTHER_THEN_NUMBER_AND_RELATION, EMPTY));\n  // }else{\n\n  const {\n    x: rectX,\n    y: rectY\n  } = node.getBoundingClientRect();\n  x = rectX;\n  y = rectY;\n  return {\n    width: offsetWidth,\n    height: offsetHeight,\n    position: position === 'fixed' ? position : 'relation',\n    x,\n    y\n  };\n};\nexport const getWindowLayout = window => {\n  if (!window) return _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    scrollX: 0,\n    scrollY: 0\n  });\n  const {\n    scrollX,\n    scrollY\n  } = window;\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    scrollY,\n    scrollX\n  };\n};\nexport const getGrade = width => {\n  if (!width || width < 1) return LayoutGrade.UN;else if (width <= SIZE_INFO.XS.max) return LayoutGrade.XS;else if (width <= SIZE_INFO.SM.max) return LayoutGrade.SM;else if (width <= SIZE_INFO.MD.max) return LayoutGrade.MD;else if (width <= SIZE_INFO.LG.max) return LayoutGrade.LG;else return LayoutGrade.XL;\n};","map":null,"metadata":{},"sourceType":"module"}