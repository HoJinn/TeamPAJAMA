{"ast":null,"code":"import { defError, NextAxios } from \"src/axios\";\nimport { pick } from \"src/util\";\nexport default ((req, res) => {\n  const {\n    social\n  } = req.query;\n\n  if (social === 'naver') {\n    naverUnlink(req, res);\n  } else if (social === 'kakao') {\n    kakaoUnlink(req, res);\n  } else {\n    res.status(400).json({\n      code: -100,\n      message: '지원하지 않는 소셜 로그인입니다'\n    });\n  }\n});\n\nconst naverUnlink = (req, res) => {\n  const naverToken = pick(req.body, ['access_token']);\n\n  if (!naverToken) {\n    res.status(400).json({\n      code: -1,\n      message: \"프로퍼티 부족합니다\"\n    });\n    return;\n  }\n\n  const {\n    access_token\n  } = naverToken;\n  const client_id = `${process.env.NEXT_PUBLIC_NAVER_CLIENT_ID}`;\n  const client_secret = `${process.env.NAVER_CLIENT_SECRET}`;\n  const grant_type = 'delete';\n  const reqUrl = `${process.env.NAVER_TOKEN_URL}`;\n  const params = {\n    service_provider: 'NAVER',\n    client_id,\n    client_secret,\n    grant_type,\n    access_token\n  };\n  NextAxios().get(reqUrl, {\n    params\n  }).then(naverRes => {\n    const {\n      data\n    } = naverRes;\n    res.status(200).json(data);\n  }).catch(naverErr => {\n    const {\n      data\n    } = defError(naverErr);\n    res.status(400).json({\n      code: -100,\n      entity: data\n    });\n  });\n};\n\nconst kakaoUnlink = (req, res) => {\n  const kakaoToken = pick(req.body, ['access_token']);\n\n  if (!kakaoToken) {\n    res.status(400).json({\n      code: -1,\n      message: \"프로퍼티 부족합니다\"\n    });\n    return;\n  }\n\n  const {\n    access_token\n  } = kakaoToken;\n  const reqHost = `${process.env.NEXT_PUBLIC_KAKAO_API_URL}`;\n  const headers = {\n    'Authorization': `Bearer ${access_token}`\n  };\n  NextAxios().post(`${reqHost}/v1/user/unlink`, undefined, {\n    headers\n  }).then(kakaoRes => {\n    const {\n      data\n    } = kakaoRes;\n    res.status(200).json(data);\n  }).catch(kakaoErr => {\n    const {\n      data\n    } = defError(kakaoErr);\n    res.status(400).json({\n      code: -100,\n      entity: data\n    });\n  });\n}; // const googleUnlink = (req:NextApiRequest, res:NextApiResponse) => {\n// }","map":null,"metadata":{},"sourceType":"module"}