{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _caption, _body, _body2, _subtitle, _subtitle2, _h, _h2;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createTheme, useMediaQuery, useTheme } from '@material-ui/core';\nimport createBreakpoints from '@material-ui/core/styles/createBreakpoints';\nimport { pxToRem } from 'src/util';\nimport { LayoutGrade, SIZE_INFO } from 'recoilStates/layout';\nvar LG = SIZE_INFO.LG,\n    MD = SIZE_INFO.MD,\n    SM = SIZE_INFO.SM,\n    XS = SIZE_INFO.XS;\nvar breakpoints = createBreakpoints({});\nexport var defButtonProps = {\n  variant: 'contained',\n  size: 'small'\n};\nvar defaultTheme = createTheme({\n  breakpoints: {\n    values: {\n      xs: XS.max,\n      sm: SM.max,\n      md: MD.max,\n      lg: LG.max,\n      xl: 1920\n    }\n  }\n});\nexport default createTheme({\n  breakpoints: _objectSpread({}, defaultTheme.breakpoints),\n  typography: {\n    fontFamily: \"roboto\"\n  },\n  palette: {\n    primary: {\n      main: '#00B7F3',\n      contrastText: '#fff'\n    },\n    secondary: {\n      main: '#B3EAFC',\n      contrastText: \"#fff\"\n    },\n    text: {\n      primary: \"#000\",\n      secondary: \"#666\"\n    }\n  },\n  overrides: {\n    MuiFormGroup: {\n      root: {\n        '&[role=\"radiogroup\"]': {\n          display: 'block'\n        }\n      }\n    },\n    MuiButton: {\n      root: {\n        minWidth: '70px',\n        \"&:focus\": {// outline:\"solid black\"\n        }\n      }\n    },\n    MuiButtonBase: {\n      root: {\n        \"&:focus\": {// outline:\"solid black\"\n        }\n      }\n    },\n    MuiSelect: {\n      root: {\n        \"&:focus\": {// outline:\"solid black\"\n        }\n      }\n    },\n    MuiCheckbox: {\n      root: {\n        \"&:focus\": {// outline:\"solid black\"\n        }\n      }\n    },\n    MuiGrid: {\n      root: {\n        '&.spacer': {\n          flexGrow: 1\n        }\n      }\n    },\n    MuiTypography: {\n      root: {\n        textTransform: 'none',\n        '&.bold': {\n          fontWeight: 600\n        },\n        '&.regular': {\n          fontWeight: 400\n        },\n        '&.light': {\n          fontWeight: 300\n        },\n        '&.thin': {\n          fontWeight: 200\n        },\n        '&.roboto': {\n          fontFamily: 'roboto'\n        },\n        '&.times': {\n          fontFamily: 'roboto',\n          letterSpacing: '3px'\n        }\n      },\n      caption: (_caption = {\n        fontSize: pxToRem(14)\n      }, _defineProperty(_caption, breakpoints.down(SM.max), {\n        fontSize: pxToRem(12)\n      }), _defineProperty(_caption, \"fontFamily\", 'roboto'), _defineProperty(_caption, \"fontWeight\", 500), _caption),\n      body2: (_body = {\n        fontSize: pxToRem(16)\n      }, _defineProperty(_body, breakpoints.down(SM.max), {\n        fontSize: pxToRem(10)\n      }), _defineProperty(_body, \"fontFamily\", 'roboto'), _defineProperty(_body, \"fontWeight\", 500), _body),\n      body1: (_body2 = {\n        fontSize: pxToRem(20)\n      }, _defineProperty(_body2, breakpoints.down(SM.max), {\n        fontSize: pxToRem(13)\n      }), _defineProperty(_body2, \"fontFamily\", 'roboto'), _defineProperty(_body2, \"fontWeight\", 500), _body2),\n      subtitle2: (_subtitle = {\n        fontSize: pxToRem(30)\n      }, _defineProperty(_subtitle, breakpoints.down(SM.max), {\n        fontSize: pxToRem(15)\n      }), _defineProperty(_subtitle, \"fontFamily\", 'roboto'), _defineProperty(_subtitle, \"fontWeight\", 500), _subtitle),\n      subtitle1: (_subtitle2 = {\n        fontSize: pxToRem(35)\n      }, _defineProperty(_subtitle2, breakpoints.down(SM.max), {\n        fontSize: pxToRem(20)\n      }), _defineProperty(_subtitle2, \"fontFamily\", 'roboto'), _defineProperty(_subtitle2, \"fontWeight\", 500), _subtitle2),\n      h6: (_h = {\n        fontSize: pxToRem(70)\n      }, _defineProperty(_h, breakpoints.down(SM.max), {\n        fontSize: pxToRem(30)\n      }), _defineProperty(_h, \"fontFamily\", 'roboto'), _defineProperty(_h, \"fontWeight\", 500), _h),\n      h5: (_h2 = {\n        //메인 섹션1 텍스트 사이즈\n        fontSize: pxToRem(140)\n      }, _defineProperty(_h2, breakpoints.down(SM.max), {\n        fontSize: pxToRem(46)\n      }), _defineProperty(_h2, \"fontFamily\", 'roboto'), _defineProperty(_h2, \"fontWeight\", 500), _h2),\n      h4: {\n        //pc 메인에서만 사용\n        fontSize: pxToRem(60),\n        fontFamily: 'roboto',\n        fontWeight: 500\n      }\n    }\n  }\n});\nexport var useLayoutGrade = function useLayoutGrade(theme) {\n  var theme_ = theme || useTheme();\n  if (!theme_) return {\n    isDownSm: false,\n    isMd: false,\n    isUpMdAndIsDownLg: false,\n    isDownXs: false,\n    isUpLg: false\n  };\n  var isUpSm = useMediaQuery(theme_.breakpoints.up(SIZE_INFO.SM.max));\n  var isDownMd = useMediaQuery(theme_.breakpoints.down(SIZE_INFO.MD.max - 0.01));\n  var isMd = isUpSm && isDownMd;\n  var isUpMd = useMediaQuery(theme_.breakpoints.up(SIZE_INFO.MD.max));\n  var isDownLg = useMediaQuery(theme_.breakpoints.down(SIZE_INFO.LG.max));\n  var isUpMdAndIsDownLg = isUpMd && isDownLg;\n  return {\n    isDownSm: useMediaQuery(theme_.breakpoints.down(SIZE_INFO.SM.max - 0.01)),\n    isMd: isMd,\n    isUpMdAndIsDownLg: isUpMdAndIsDownLg,\n    isDownXs: useMediaQuery(theme_.breakpoints.down(LayoutGrade.XS)),\n    // useMediaQuery(theme_.breakpoints.up(SIZE_INFO.SM.max)) \n    // && useMediaQuery(theme_.breakpoints.up(SIZE_INFO.MD.max)),\n    isUpLg: useMediaQuery(theme_.breakpoints.up(LayoutGrade.LG))\n  };\n};","map":null,"metadata":{},"sourceType":"module"}