{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useEffect, useState } from \"react\";\nimport { Box, makeStyles } from \"@material-ui/core\"; // import TourchRipple from '@material-ui/core/ButtonBase/TouchRipple';\n\nimport clsx from \"clsx\";\nconst useAspectRatioBoxStyles = makeStyles(_theme => ({\n  box: {\n    overflow: 'hidden'\n  }\n}));\n\nconst AspectRatioBox = _ref => {\n  let {\n    children,\n    className,\n    width,\n    aspectRatio\n  } = _ref,\n      boxProps = _objectWithoutProperties(_ref, [\"children\", \"className\", \"width\", \"aspectRatio\"]);\n\n  const classes = useAspectRatioBoxStyles();\n  const boxClass = clsx(classes.box, className);\n  const {\n    0: divStyle,\n    1: setDivStyle\n  } = useState({});\n  useEffect(() => {\n    // if(!boxRef.current) return;\n    // const {offsetWidth} = boxRef.current\n    setDivStyle({\n      display: 'block',\n      paddingTop: `${aspectRatio * 100}%`\n    });\n  }, [aspectRatio, width]);\n  return __jsx(Box, _extends({}, boxProps, {\n    className: boxClass,\n    width: width,\n    position: \"relative\"\n  }), __jsx(\"div\", {\n    style: divStyle\n  }), __jsx(Box, {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0\n  }, children));\n};\n\nexport default AspectRatioBox;","map":null,"metadata":{},"sourceType":"module"}