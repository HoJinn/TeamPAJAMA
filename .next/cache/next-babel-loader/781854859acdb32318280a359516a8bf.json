{"ast":null,"code":"var _jsxFileName = \"C:\\\\pro\\\\myReact\\\\TeamPAJAMA\\\\components\\\\shape\\\\aspectRatioBox.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useEffect, useState } from \"react\";\nimport { Box, makeStyles } from \"@material-ui/core\"; // import TourchRipple from '@material-ui/core/ButtonBase/TouchRipple';\n\nimport clsx from \"clsx\";\nconst useAspectRatioBoxStyles = makeStyles(_theme => ({\n  box: {\n    overflow: 'hidden'\n  }\n}));\n\nconst AspectRatioBox = _ref => {\n  let {\n    children,\n    className,\n    width,\n    aspectRatio\n  } = _ref,\n      boxProps = _objectWithoutProperties(_ref, [\"children\", \"className\", \"width\", \"aspectRatio\"]);\n\n  const classes = useAspectRatioBoxStyles();\n  const boxClass = clsx(classes.box, className);\n  const {\n    0: divStyle,\n    1: setDivStyle\n  } = useState({});\n  useEffect(() => {\n    // if(!boxRef.current) return;\n    // const {offsetWidth} = boxRef.current\n    setDivStyle({\n      display: 'block',\n      paddingTop: `${aspectRatio * 100}%`\n    });\n  }, [aspectRatio, width]);\n  return __jsx(Box, _extends({}, boxProps, {\n    className: boxClass,\n    width: width,\n    position: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), __jsx(Box, {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, children));\n};\n\nexport default AspectRatioBox;","map":{"version":3,"sources":["C:/pro/myReact/TeamPAJAMA/components/shape/aspectRatioBox.tsx"],"names":["useEffect","useState","Box","makeStyles","clsx","useAspectRatioBoxStyles","_theme","box","overflow","AspectRatioBox","children","className","width","aspectRatio","boxProps","classes","boxClass","divStyle","setDivStyle","display","paddingTop"],"mappings":";;;;;;;;;;AAAA,SAA4BA,SAA5B,EAAuCC,QAAvC,QAAsD,OAAtD;AACA,SAASC,GAAT,EAAwBC,UAAxB,QAA0C,mBAA1C,C,CACA;;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAQA,MAAMC,uBAAuB,GAAGF,UAAU,CAACG,MAAM,KAAK;AACpDC,EAAAA,GAAG,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ;AAD+C,CAAL,CAAP,CAA1C;;AAGA,MAAMC,cAAsC,GAAG,QAA4D;AAAA,MAA3D;AAACC,IAAAA,QAAD;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA;AAA7B,GAA2D;AAAA,MAAdC,QAAc;;AACzG,QAAMC,OAAO,GAAGV,uBAAuB,EAAvC;AACA,QAAMW,QAAQ,GAAGZ,IAAI,CAACW,OAAO,CAACR,GAAT,EAAcI,SAAd,CAArB;AACA,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BjB,QAAQ,CAAgB,EAAhB,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACAkB,IAAAA,WAAW,CAAC;AACVC,MAAAA,OAAO,EAAE,OADC;AAEVC,MAAAA,UAAU,EAAG,GAAEP,WAAW,GAAG,GAAI;AAFvB,KAAD,CAAX;AAKD,GARQ,EAQN,CAACA,WAAD,EAAcD,KAAd,CARM,CAAT;AASA,SACE,MAAC,GAAD,eAASE,QAAT;AACE,IAAA,SAAS,EAAEE,QADb;AAEE,IAAA,KAAK,EAAEJ,KAFT;AAGE,IAAA,QAAQ,EAAC,UAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKE;AAAK,IAAA,KAAK,EAAEK,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME,MAAC,GAAD;AAAK,IAAA,QAAQ,EAAC,UAAd;AACE,IAAA,GAAG,EAAE,CADP;AACU,IAAA,IAAI,EAAE,CADhB;AACmB,IAAA,MAAM,EAAE,CAD3B;AAC8B,IAAA,KAAK,EAAE,CADrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGP,QAHH,CANF,CADF;AAcD,CA5BD;;AA8BA,eAAeD,cAAf","sourcesContent":["import { CSSProperties, FC, useEffect, useState} from \"react\";\r\nimport { Box, BoxProps, makeStyles } from \"@material-ui/core\";\r\n// import TourchRipple from '@material-ui/core/ButtonBase/TouchRipple';\r\nimport clsx from \"clsx\";\r\n\r\n\r\ninterface AspectRatioBoxProps extends Omit<BoxProps, 'width'|'position'> {\r\n  width: any;\r\n  aspectRatio: number;\r\n  // refresh?: number;\r\n}\r\nconst useAspectRatioBoxStyles = makeStyles(_theme => ({\r\n  box: { overflow: 'hidden' }\r\n}))\r\nconst AspectRatioBox:FC<AspectRatioBoxProps> = ({children, className, width, aspectRatio, ...boxProps}) => {\r\n  const classes = useAspectRatioBoxStyles();\r\n  const boxClass = clsx(classes.box, className)\r\n  const [divStyle, setDivStyle] = useState<CSSProperties>({})\r\n\r\n  useEffect(() => {\r\n    // if(!boxRef.current) return;\r\n    // const {offsetWidth} = boxRef.current\r\n    setDivStyle({\r\n      display: 'block',\r\n      paddingTop: `${aspectRatio * 100}%`\r\n    });\r\n\r\n  }, [aspectRatio, width])\r\n  return (\r\n    <Box {...boxProps} \r\n      className={boxClass}\r\n      width={width}\r\n      position='relative'\r\n    >\r\n      <div style={divStyle}/>\r\n      <Box position=\"absolute\" \r\n        top={0} left={0} bottom={0} right={0}\r\n      >\r\n        {children}\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default AspectRatioBox;"]},"metadata":{},"sourceType":"module"}