{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { atom, selector } from 'recoil';\n/** README!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n *  select: 접미사에 Selector가 붙은 것을 사용할 것.\r\n *  update: 접미사에 AsOnlySetter이 붙은 것을 사용할 것.\r\n *  README!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n */\n\nvar LAYOUT_INIT = {\n  width: 0,\n  height: 0\n};\nexport var LayoutGrade;\n\n(function (LayoutGrade) {\n  LayoutGrade[\"XL\"] = \"xl\";\n  LayoutGrade[\"LG\"] = \"lg\";\n  LayoutGrade[\"MD\"] = \"md\";\n  LayoutGrade[\"SM\"] = \"sm\";\n  LayoutGrade[\"XS\"] = \"xs\";\n  LayoutGrade[\"UN\"] = \"un\";\n})(LayoutGrade || (LayoutGrade = {}));\n\nexport var SIZE_INFO = {\n  XS: {\n    grade: LayoutGrade.XS,\n    max: 360\n  },\n  SM: {\n    grade: LayoutGrade.SM,\n    max: 640\n  },\n  MD: {\n    grade: LayoutGrade.MD,\n    max: 960\n  },\n  LG: {\n    grade: LayoutGrade.LG,\n    max: 1280\n  },\n  XL: {\n    grade: LayoutGrade.XL\n  }\n};\nexport var windowLayoutAsOnlySetter = atom({\n  key: 'windowLayoutAsOnlySetter',\n  \"default\": _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    scrollX: 0,\n    scrollY: 0\n  })\n});\nexport var windowLayoutSelector = selector({\n  key: 'windowLayoutSelector',\n  get: function get(_ref) {\n    var _get = _ref.get;\n\n    var windowLayout = _get(windowLayoutAsOnlySetter);\n\n    var width = windowLayout.width;\n    return _objectSpread(_objectSpread({}, windowLayout), {}, {\n      grade: getGrade(width)\n    });\n  }\n});\nexport var headerLayoutAsOnlySetter = atom({\n  key: 'headerLayoutAsOnlySetter',\n  \"default\": _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    position: 'relation',\n    x: 0,\n    y: 0\n  })\n});\nexport var headerLayoutSelector = selector({\n  key: 'headerLayoutSelector',\n  get: function get(_ref2) {\n    var _get2 = _ref2.get;\n\n    var headerLayout = _get2(headerLayoutAsOnlySetter);\n\n    var width = headerLayout.width;\n    return _objectSpread(_objectSpread({}, headerLayout), {}, {\n      grade: getGrade(width)\n    });\n  }\n});\nexport var navLayoutAsOnlySetter = atom({\n  key: 'navLayoutAsOnlySetter',\n  \"default\": _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    position: 'relation',\n    x: 0,\n    y: 0\n  })\n});\nexport var navLayoutSelector = selector({\n  key: 'navLayoutSelector',\n  get: function get(_ref3) {\n    var _get3 = _ref3.get;\n\n    var navLayout = _get3(navLayoutAsOnlySetter);\n\n    var width = navLayout.width;\n    return _objectSpread(_objectSpread({}, navLayout), {}, {\n      grade: getGrade(width)\n    });\n  }\n});\nexport var contentLayoutAsOnlySetter = atom({\n  key: 'contentLayoutAsOnlySetter',\n  \"default\": _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    position: 'relation',\n    x: 0,\n    y: 0\n  })\n});\nexport var contentLayoutSelector = selector({\n  key: 'contentLayoutSelector',\n  get: function get(_ref4) {\n    var _get4 = _ref4.get;\n\n    var contentLayout = _get4(contentLayoutAsOnlySetter);\n\n    var width = contentLayout.width;\n    return _objectSpread(_objectSpread({}, contentLayout), {}, {\n      grade: getGrade(width)\n    });\n  }\n});\nexport var footerLayoutAsOnlySetter = atom({\n  key: 'footerLayoutAsOnlySetter',\n  \"default\": _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    position: 'relation',\n    x: 0,\n    y: 0\n  })\n});\nexport var footerLayoutSelector = selector({\n  key: 'footerLayoutSelector',\n  get: function get(_ref5) {\n    var _get5 = _ref5.get;\n\n    var footerLayout = _get5(footerLayoutAsOnlySetter);\n\n    var width = footerLayout.width;\n    return _objectSpread(_objectSpread({}, footerLayout), {}, {\n      grade: getGrade(width)\n    });\n  }\n}); //\n// ACTIONS\n//\n\nexport var getBasicLayout = function getBasicLayout(node) {\n  if (!node) return _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    position: 'relation',\n    x: 0,\n    y: 0\n  });\n  var offsetWidth = node.offsetWidth,\n      offsetHeight = node.offsetHeight;\n  var position = node.style.position;\n  var x, y; // if(position === 'fixed' && node.style){\n  //   const {left, top} = node.style;\n  //   x = Number(left.replace(OTHER_THEN_NUMBER_AND_RELATION, EMPTY));\n  //   y = Number(top.replace(OTHER_THEN_NUMBER_AND_RELATION, EMPTY));\n  // }else{\n\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n      rectX = _node$getBoundingClie.x,\n      rectY = _node$getBoundingClie.y;\n\n  x = rectX;\n  y = rectY;\n  return {\n    width: offsetWidth,\n    height: offsetHeight,\n    position: position === 'fixed' ? position : 'relation',\n    x: x,\n    y: y\n  };\n};\nexport var getWindowLayout = function getWindowLayout(window) {\n  if (!window) return _objectSpread(_objectSpread({}, LAYOUT_INIT), {}, {\n    scrollX: 0,\n    scrollY: 0\n  });\n  var scrollX = window.scrollX,\n      scrollY = window.scrollY;\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    scrollY: scrollY,\n    scrollX: scrollX\n  };\n};\nexport var getGrade = function getGrade(width) {\n  if (!width || width < 1) return LayoutGrade.UN;else if (width <= SIZE_INFO.XS.max) return LayoutGrade.XS;else if (width <= SIZE_INFO.SM.max) return LayoutGrade.SM;else if (width <= SIZE_INFO.MD.max) return LayoutGrade.MD;else if (width <= SIZE_INFO.LG.max) return LayoutGrade.LG;else return LayoutGrade.XL;\n};","map":null,"metadata":{},"sourceType":"module"}