{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Axios from 'axios';\nexport let ContentType;\n\n(function (ContentType) {\n  ContentType[\"MULTIPART\"] = \"multipart/form-data\";\n  ContentType[\"JSON\"] = \"application/json\";\n})(ContentType || (ContentType = {}));\n\nAxios.defaults.headers.post['Content-Type'] = ContentType.JSON;\nAxios.defaults.headers.put['Content-Type'] = ContentType.JSON;\nAxios.defaults.headers.patch['Content-Type'] = ContentType.JSON;\nAxios.defaults.headers.delete['Content-Type'] = ContentType.JSON;\nAxios.defaults.timeout = 5000; // Axios.defaults.baseURL = process.env.NEXT_PUBLIC_API_URL;\n\nAxios.defaults.withCredentials = true;\nconst GET_TIMEOUT = 2500; // export type defForm<T> = {\n//   status: number,\n//   data: T,\n//   err?: any  \n// }\n\nconst defSuccess = res => {\n  const {\n    status,\n    data\n  } = res;\n\n  if (status == 204) {\n    return {\n      status: 204,\n      data: null,\n      success: true,\n      err: undefined\n    };\n  } else return {\n    status,\n    data,\n    success: true,\n    err: undefined\n  };\n};\n\nconst defError = err => {\n  if (err.response) {\n    const {\n      status,\n      data\n    } = err.response;\n    return {\n      status,\n      data,\n      success: false,\n      err\n    };\n  } else {\n    return {\n      status: -1,\n      data: {\n        code: -1,\n        message: '에러 메세지를 확인해주세요'\n      },\n      success: false,\n      err: err || {}\n    };\n  }\n}; // const NextAxios = (ctx?:NextPageContext) => {\n//   if(!ctx || !ctx.req)\n//     return Axios;\n//   const clientHeaders = ctx.req.headers;\n//   Object\n//     .keys(clientHeaders)\n//     .forEach( key => Axios.defaults.headers.common[key] = clientHeaders[key] )\n//   return Axios;\n// }\n\n\nconst NextAxios = ctx => {\n  if (ctx && ctx.req) {\n    const clientHeaders = ctx.req.headers;\n    const {\n      cookie\n    } = clientHeaders;\n    if (cookie) Axios.defaults.headers.Cookie = cookie; // Object\n    //   .keys(clientHeaders)\n    //   .forEach( key => Axios.defaults.headers.common[key] = clientHeaders[key] )\n  }\n\n  return _objectSpread(_objectSpread({}, Axios), {}, {\n    get: (url, config) => Axios.get(url, _objectSpread({\n      timeout: GET_TIMEOUT\n    }, config)),\n    multipart: (url, data, config) => {\n      const headers = (config === null || config === void 0 ? void 0 : config.headers) || {};\n      return Axios.post(url, data, _objectSpread(_objectSpread({}, config), {}, {\n        headers: _objectSpread(_objectSpread({}, headers), {}, {\n          'content-type': ContentType.MULTIPART\n        })\n      }));\n    }\n  });\n};\n\nexport { NextAxios, defSuccess, defError };\nexport default Axios;","map":null,"metadata":{},"sourceType":"module"}