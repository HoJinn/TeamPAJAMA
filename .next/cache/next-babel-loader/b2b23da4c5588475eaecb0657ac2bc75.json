{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useRecoilValue } from 'recoil';\nimport { windowLayoutSelector, getBasicLayout } from 'recoilStates/layout';\n\nvar useResizeEvent = function useResizeEvent(elementRef, effectCallback) {\n  _s();\n\n  var windowLayout = useRecoilValue(windowLayoutSelector);\n  useEffect(function () {\n    var ref = elementRef.current;\n\n    if (ref) {\n      var endEffect = effectCallback(getBasicLayout(ref));\n      return function () {\n        if (endEffect) endEffect(getBasicLayout(ref));\n      };\n    }\n  }, [windowLayout, elementRef]);\n};\n\n_s(useResizeEvent, \"NAx3U9p40SXbSi48+Cd0q5/avc8=\", false, function () {\n  return [useRecoilValue];\n});\n\nexport default useResizeEvent;","map":{"version":3,"sources":["C:/pro/myReact/TeamPAJAMA/src/hooks/useResizeEvent.ts"],"names":["useEffect","useRecoilValue","windowLayoutSelector","getBasicLayout","useResizeEvent","elementRef","effectCallback","windowLayout","ref","current","endEffect"],"mappings":";;AAAA,SAASA,SAAT,QAA4C,OAA5C;AACA,SAAQC,cAAR,QAA6B,QAA7B;AAEA,SAAsBC,oBAAtB,EAA4CC,cAA5C,QAAiE,qBAAjE;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CACrBC,UADqB,EAErBC,cAFqB,EAGlB;AAAA;;AACH,MAAMC,YAAY,GAAGN,cAAc,CAACC,oBAAD,CAAnC;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMQ,GAAG,GAAGH,UAAU,CAACI,OAAvB;;AACA,QAAGD,GAAH,EAAO;AACL,UAAME,SAAS,GAAGJ,cAAc,CAAEH,cAAc,CAACK,GAAD,CAAhB,CAAhC;AACA,aAAO,YAAM;AACX,YAAGE,SAAH,EACEA,SAAS,CAAEP,cAAc,CAACK,GAAD,CAAhB,CAAT;AACH,OAHD;AAID;AACF,GATQ,EASN,CAACD,YAAD,EAAeF,UAAf,CATM,CAAT;AAUD,CAhBD;;GAAMD,c;UAIiBH,c;;;AAcvB,eAAeG,cAAf","sourcesContent":["import { useEffect, MutableRefObject } from \"react\";\r\nimport {useRecoilValue} from 'recoil';\r\n\r\nimport { BasicLayout, windowLayoutSelector, getBasicLayout} from 'recoilStates/layout';\r\n\r\nconst useResizeEvent = <T extends HTMLElement|null>(\r\n  elementRef:MutableRefObject<T>, \r\n  effectCallback: (layout:BasicLayout) => (void | ((layout:BasicLayout) => void | undefined))\r\n) => {\r\n  const windowLayout = useRecoilValue(windowLayoutSelector);\r\n\r\n  useEffect(() => {\r\n    const ref = elementRef.current;\r\n    if(ref){\r\n      const endEffect = effectCallback( getBasicLayout(ref) );\r\n      return () => {\r\n        if(endEffect)\r\n          endEffect( getBasicLayout(ref) );\r\n      }\r\n    }\r\n  }, [windowLayout, elementRef ])\r\n}\r\n\r\nexport default useResizeEvent;"]},"metadata":{},"sourceType":"module"}