{"ast":null,"code":"import { DIMENSION_FORM, isNumberForm, isUndeclared, OTHER_THEN_NUMBER } from \"./format\";\nimport moment from 'moment';\nexport var clone = function clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\nexport var pxToRem = function pxToRem(value) {\n  var rootSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  return \"\".concat(value / rootSize, \"rem\");\n};\nvar UNIT_FORM = /[^\\s\\,\\.]+/;\nvar NUMBER_FORM = /[\\-\\+]?\\d*(\\.\\d+)?/;\nexport var getDigitAndUnitList = function getDigitAndUnitList(dimension) {\n  var arr = dimension.match(DIMENSION_FORM);\n  if (!arr || arr.length === 0) return [];\n  return arr.filter(function (keyword) {\n    return keyword;\n  }).map(function (keyword) {\n    var numberForm = keyword.match(NUMBER_FORM);\n    if (!numberForm || numberForm.length === 0) return {};\n    var digit = Number(numberForm[0]);\n    var unitForm = keyword.replace(numberForm[0], '').trim().match(UNIT_FORM);\n    if (!unitForm || unitForm.length === 0) return {\n      digit: digit\n    };\n    var unit = unitForm[0];\n    return {\n      digit: digit,\n      unit: unit\n    };\n  }).filter(function (digitAndUnit) {\n    return digitAndUnit.digit;\n  });\n};\nexport var getDigitAndUnit = function getDigitAndUnit(dimension) {\n  var digitAndUnitList = getDigitAndUnitList(dimension);\n  return digitAndUnitList.length === 0 ? {} : digitAndUnitList[0];\n};\nexport var isNumberAndPad = function isNumberAndPad(_ref) {\n  var value = _ref.value,\n      _ref$start = _ref.start,\n      start = _ref$start === void 0 ? '' : _ref$start,\n      _ref$end = _ref.end,\n      end = _ref$end === void 0 ? '' : _ref$end;\n  if (!isNumberForm(value) || !value) return;\n  return \"\".concat(start).concat(value).concat(end);\n};\nexport var randomInt = function randomInt(max, min) {\n  Math.random() * (max - min);\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nexport var initNumber = function initNumber(obj, def) {\n  var result = obj * 1;\n  if (Number.isInteger(result)) return result;else if (!def) return NaN;else return def;\n};\nexport var initString = function initString(obj, def) {\n  if (!obj) return def;else if (Array.isArray(obj)) return obj[0];else return obj;\n};\nexport var toQuery = function toQuery(obj, encode) {\n  var result = '';\n  if (obj && typeof obj === 'object') Object.keys(obj).forEach(function (k) {\n    var item = obj[k];\n\n    if (Array.isArray(item)) {\n      item.forEach(function (v) {\n        if (!isUndeclared(v)) result += \"\".concat(k, \"=\").concat(!isUndeclared(encode) ? encodeURIComponent(v) : v, \"&\");\n      });\n    } else if (!isUndeclared(item)) {\n      result += \"\".concat(k, \"=\").concat(!isUndeclared(encode) ? encodeURIComponent(item) : item, \"&\");\n    }\n  });\n  if (result.endsWith('&')) result = result.substr(0, result.length - 1); // if(result.endsWith('?')) result = '';\n\n  return result;\n};\nexport var getProperty = function getProperty(o, name) {\n  return o[name];\n}; // getProperty({src:'sss', sss: 'asd'}, 'src');\n\nexport var makeCSSProperties = function makeCSSProperties(properties) {\n  return properties;\n};\nexport var pick = function pick(object, keys) {\n  // export const pick = <T, K extends keyof T, F>(object: T, keys: Array<K>, filter?:(key: K, val:T[K]) => F): Pick<T, K>|Record<K, F> | undefined =>{\n  var obj = {};\n  var keys_ = keys || Object.keys(object);\n  var fail = keys_.some(function (key) {\n    var val = object[key];\n    if (isUndeclared(val)) return true; // val = filter? filter(key, val) as F : val;\n    // if( isUndeclared(val) ) return true;\n\n    obj[key] = val;\n  });\n  if (fail) return undefined;\n  return obj;\n};\nexport var privateNumberToBirthGender = function privateNumberToBirthGender(privateNumber) {\n  var onlyNumber = privateNumber.replace(OTHER_THEN_NUMBER, '');\n  if (onlyNumber.length < 7) return undefined;\n  var firstOfRear = Number(onlyNumber.substring(6, 7));\n\n  if (firstOfRear === 1 || firstOfRear === 2 || firstOfRear === 5 || firstOfRear === 6) {\n    var year = \"19\".concat(onlyNumber.substring(0, 2));\n    return {\n      year: year,\n      month: onlyNumber.substring(2, 4),\n      day: onlyNumber.substring(4, 6),\n      gender: firstOfRear === 1 || firstOfRear === 5 ? 'M' : 'F',\n      age: Number(moment().format('yyyy')) - Number(year)\n    };\n  } else if (firstOfRear === 9 || firstOfRear === 0) {\n    var _year = \"18\".concat(onlyNumber.substring(0, 2));\n\n    return {\n      year: _year,\n      month: onlyNumber.substring(2, 4),\n      day: onlyNumber.substring(4, 6),\n      gender: firstOfRear === 9 ? 'M' : 'F',\n      age: Number(moment().format('yyyy')) - Number(_year)\n    };\n  } else {\n    var _year2 = \"20\".concat(onlyNumber.substring(0, 2));\n\n    return {\n      year: _year2,\n      month: onlyNumber.substring(2, 4),\n      day: onlyNumber.substring(4, 6),\n      gender: firstOfRear === 3 || firstOfRear === 7 ? 'M' : 'F',\n      age: Number(moment().format('yyyy')) - Number(_year2)\n    };\n  } // if( firstOfRear === 1 || firstOfRear === 2 ) {        // 1900\n  // }else if( firstOfRear === 3 || firstOfRear === 4 ) {  //2000\n  // }else if( firstOfRear === 9 || firstOfRear === 0 ) {  // 1800\n  // }else if( firstOfRear === 5 || firstOfRear === 6 ){   // 1900 \n  // }else if( firstOfRear === 7 || firstOfRear === 8){    // 2000\n  // } \n\n};\nexport var createArr = function createArr(startOrEnd, end) {\n  var list = [];\n\n  if (end) {\n    for (var i = startOrEnd; i < end; i++) {\n      list.push(i);\n    }\n  } else {\n    for (var _i = 0; _i < startOrEnd; _i++) {\n      list.push(_i);\n    }\n  }\n\n  return list;\n};\nexport var getFullUrl = function getFullUrl(obj, size) {\n  if (!obj || !obj.id) return;\n  var id = obj.id;\n  var queryString = toQuery(size ? {\n    size: size\n  } : null);\n  return \"\".concat(process.env.NEXT_PUBLIC_API_IMG, \"/\").concat(id, \"?\").concat(queryString);\n}; // const makeProperties = <V, T extends Record<string, V> >(properties: T):T => properties;\n// const makeProperties = <V, K>(properties: Map<K, V>):Map<K, V> => properties\n// type Nullable<Origin, Nullable extends keyof Origin> ={\n//   [P in Nullable ]?: Origin[P]\n// }\n// export const makeProperties = \n//   <V, T=V>(properties: T): Record<string, T> => {\n//     const result:any = {} ;\n//     for(const key in properties)\n//       result[key] = properties[key];\n//     return result as Record<typeof T, V>;\n//   };\n// export const makeProperties = \n//   <T = >(properties: T): T => properties","map":null,"metadata":{},"sourceType":"module"}