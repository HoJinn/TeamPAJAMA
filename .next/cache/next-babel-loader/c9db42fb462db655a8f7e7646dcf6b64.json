{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core';\nimport theme from 'theme/theme';\nimport { atom, RecoilRoot, useRecoilState, useSetRecoilState } from 'recoil';\nimport { getWindowLayout, windowLayoutAsOnlySetter } from 'recoilStates/layout';\nimport { useRouter } from 'next/router';\nimport { getBookmarkPage, removeBookmarpage } from 'src/routerUtil';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport 'theme/main.css';\nimport 'suneditor/dist/css/suneditor.min.css';\nimport Favicon from \"assets/fav.ico\"; // import ReactDOM from 'react-dom'\n// import('@axe-core/react')\n// .then(\n//   ({default: axe}) => axe(React, ReactDOM, 1000),\n//   ({message}) => console.error(message)\n// )\n\nconst MyApp = props => {\n  const {\n    Component,\n    pageProps\n  } = props;\n  const router = useRouter();\n  useEffect(() => {\n    const pathQuery = getBookmarkPage();\n    if (pathQuery && router.pathname === pathQuery.pathname) removeBookmarpage();\n  }, [router]);\n  useEffect(() => {\n    // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector('#jss-server-side');\n    if (jssStyles) jssStyles.parentElement.removeChild(jssStyles); // if (window.navigator.userAgent.match(/MSIE|Internet Explorer|Trident/i)) {\n    //   alert(\"익스플로러를 지원하지 않습니다\");\n    //   location.href = \"microsoft-edge:\" + window.location.href;\n    // }\n  }, []);\n  return __jsx(Wrapper, null, __jsx(Head, null, __jsx(\"title\", null, \"\\uB2E5\\uD130\\uD06C\\uB9B0\"), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n  }), __jsx(\"link\", {\n    rel: \"icon\",\n    href: Favicon,\n    type: \"image/x-icon\"\n  })), __jsx(WindowLayoutEvent, null, __jsx(ThemeProvider, {\n    theme: theme\n  }, __jsx(CssBaseline, null), __jsx(Component, pageProps))));\n};\n\nMyApp.getInitialProps = async context => {\n  const {\n    ctx,\n    Component\n  } = context; // const {store} = ctx;\n\n  let pageProps = {}; // 비동기작업 한번에 처리. 스레드 블럭.\n\n  if (Component.getInitialProps) {\n    const new_ctx = _objectSpread({}, ctx);\n\n    pageProps = await Component.getInitialProps(new_ctx);\n  }\n\n  return {\n    pageProps: _objectSpread({}, pageProps)\n  };\n};\n\nexport default MyApp;\nconst prevPathNameAtom = atom({\n  key: 'prevPathNameAtom',\n  default: \"\"\n});\nconst queryClient = new QueryClient();\n\nconst Wrapper = ({\n  children\n}) => {\n  return __jsx(QueryClientProvider, {\n    client: queryClient\n  }, __jsx(RecoilRoot, null, children));\n};\n\nconst WindowLayoutEvent = ({\n  children\n}) => {\n  const {\n    0: init,\n    1: setInit\n  } = useState(true);\n  const setWindowLayout = useSetRecoilState(windowLayoutAsOnlySetter);\n  const [prevPath, setPrevPath] = useRecoilState(prevPathNameAtom);\n  const router = useRouter();\n  useEffect(() => {\n    if (!prevPath || prevPath !== router.pathname) {\n      scrollTo(0, 0);\n    }\n\n    setPrevPath(router.pathname);\n  }, [router]);\n  useEffect(() => {\n    if (init) {\n      setInit(false); // window.addEventListener('load', () => {\n\n      window.addEventListener('resize', () => setWindowLayout(getWindowLayout(window)));\n      setWindowLayout(getWindowLayout(window)); // window.addEventListener('scroll',\n      //   () => setWindowLayout(getWindowLayout(window))\n      // )\n      // })\n    }\n\n    return () => {\n      // window.removeEventListener('load', () => {});\n      window.removeEventListener('resize', () => setWindowLayout(getWindowLayout()));\n      window.removeEventListener('resize', () => {\n        /** This is intentional*/\n      });\n    };\n  });\n  return __jsx(React.Fragment, null, children);\n};","map":null,"metadata":{},"sourceType":"module"}