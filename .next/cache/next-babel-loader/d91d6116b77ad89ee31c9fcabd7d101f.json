{"ast":null,"code":"import { DIMENSION_FORM, isNumberForm, isUndeclared, OTHER_THEN_NUMBER } from \"./format\";\nimport moment from 'moment';\nexport const clone = obj => JSON.parse(JSON.stringify(obj));\nexport const pxToRem = (value, rootSize = 16) => `${value / rootSize}rem`;\nconst UNIT_FORM = /[^\\s\\,\\.]+/;\nconst NUMBER_FORM = /[\\-\\+]?\\d*(\\.\\d+)?/;\nexport const getDigitAndUnitList = dimension => {\n  const arr = dimension.match(DIMENSION_FORM);\n  if (!arr || arr.length === 0) return [];\n  return arr.filter(keyword => keyword).map(keyword => {\n    const numberForm = keyword.match(NUMBER_FORM);\n    if (!numberForm || numberForm.length === 0) return {};\n    const digit = Number(numberForm[0]);\n    const unitForm = keyword.replace(numberForm[0], '').trim().match(UNIT_FORM);\n    if (!unitForm || unitForm.length === 0) return {\n      digit\n    };\n    const unit = unitForm[0];\n    return {\n      digit,\n      unit\n    };\n  }).filter(digitAndUnit => digitAndUnit.digit);\n};\nexport const getDigitAndUnit = dimension => {\n  const digitAndUnitList = getDigitAndUnitList(dimension);\n  return digitAndUnitList.length === 0 ? {} : digitAndUnitList[0];\n};\nexport const isNumberAndPad = ({\n  value,\n  start = '',\n  end = ''\n}) => {\n  if (!isNumberForm(value) || !value) return;\n  return `${start}${value}${end}`;\n};\nexport const randomInt = (max, min) => {\n  Math.random() * (max - min);\n  return Math.floor(Math.random() * (max - min)) + min;\n};\nexport const initNumber = (obj, def) => {\n  let result = obj * 1;\n  if (Number.isInteger(result)) return result;else if (!def) return NaN;else return def;\n};\nexport const initString = (obj, def) => {\n  if (!obj) return def;else if (Array.isArray(obj)) return obj[0];else return obj;\n};\nexport const toQuery = (obj, encode) => {\n  let result = '';\n  if (obj && typeof obj === 'object') Object.keys(obj).forEach(k => {\n    const item = obj[k];\n\n    if (Array.isArray(item)) {\n      item.forEach(v => {\n        if (!isUndeclared(v)) result += `${k}=${!isUndeclared(encode) ? encodeURIComponent(v) : v}&`;\n      });\n    } else if (!isUndeclared(item)) {\n      result += `${k}=${!isUndeclared(encode) ? encodeURIComponent(item) : item}&`;\n    }\n  });\n  if (result.endsWith('&')) result = result.substr(0, result.length - 1); // if(result.endsWith('?')) result = '';\n\n  return result;\n};\nexport const getProperty = (o, name) => o[name]; // getProperty({src:'sss', sss: 'asd'}, 'src');\n\nexport const makeCSSProperties = properties => properties;\nexport const pick = (object, keys) => {\n  // export const pick = <T, K extends keyof T, F>(object: T, keys: Array<K>, filter?:(key: K, val:T[K]) => F): Pick<T, K>|Record<K, F> | undefined =>{\n  const obj = {};\n  const keys_ = keys || Object.keys(object);\n  const fail = keys_.some(key => {\n    let val = object[key];\n    if (isUndeclared(val)) return true; // val = filter? filter(key, val) as F : val;\n    // if( isUndeclared(val) ) return true;\n\n    obj[key] = val;\n  });\n  if (fail) return undefined;\n  return obj;\n};\nexport const privateNumberToBirthGender = privateNumber => {\n  const onlyNumber = privateNumber.replace(OTHER_THEN_NUMBER, '');\n  if (onlyNumber.length < 7) return undefined;\n  const firstOfRear = Number(onlyNumber.substring(6, 7));\n\n  if (firstOfRear === 1 || firstOfRear === 2 || firstOfRear === 5 || firstOfRear === 6) {\n    const year = `19${onlyNumber.substring(0, 2)}`;\n    return {\n      year,\n      month: onlyNumber.substring(2, 4),\n      day: onlyNumber.substring(4, 6),\n      gender: firstOfRear === 1 || firstOfRear === 5 ? 'M' : 'F',\n      age: Number(moment().format('yyyy')) - Number(year)\n    };\n  } else if (firstOfRear === 9 || firstOfRear === 0) {\n    const year = `18${onlyNumber.substring(0, 2)}`;\n    return {\n      year,\n      month: onlyNumber.substring(2, 4),\n      day: onlyNumber.substring(4, 6),\n      gender: firstOfRear === 9 ? 'M' : 'F',\n      age: Number(moment().format('yyyy')) - Number(year)\n    };\n  } else {\n    const year = `20${onlyNumber.substring(0, 2)}`;\n    return {\n      year,\n      month: onlyNumber.substring(2, 4),\n      day: onlyNumber.substring(4, 6),\n      gender: firstOfRear === 3 || firstOfRear === 7 ? 'M' : 'F',\n      age: Number(moment().format('yyyy')) - Number(year)\n    };\n  } // if( firstOfRear === 1 || firstOfRear === 2 ) {        // 1900\n  // }else if( firstOfRear === 3 || firstOfRear === 4 ) {  //2000\n  // }else if( firstOfRear === 9 || firstOfRear === 0 ) {  // 1800\n  // }else if( firstOfRear === 5 || firstOfRear === 6 ){   // 1900 \n  // }else if( firstOfRear === 7 || firstOfRear === 8){    // 2000\n  // } \n\n};\nexport const createArr = (startOrEnd, end) => {\n  const list = [];\n\n  if (end) {\n    for (let i = startOrEnd; i < end; i++) list.push(i);\n  } else {\n    for (let i = 0; i < startOrEnd; i++) list.push(i);\n  }\n\n  return list;\n};\nexport const getFullUrl = (obj, size) => {\n  if (!obj || !obj.id) return;\n  const {\n    id\n  } = obj;\n  const queryString = toQuery(size ? {\n    size\n  } : null);\n  return `${process.env.NEXT_PUBLIC_API_IMG}/${id}?${queryString}`;\n}; // const makeProperties = <V, T extends Record<string, V> >(properties: T):T => properties;\n// const makeProperties = <V, K>(properties: Map<K, V>):Map<K, V> => properties\n// type Nullable<Origin, Nullable extends keyof Origin> ={\n//   [P in Nullable ]?: Origin[P]\n// }\n// export const makeProperties = \n//   <V, T=V>(properties: T): Record<string, T> => {\n//     const result:any = {} ;\n//     for(const key in properties)\n//       result[key] = properties[key];\n//     return result as Record<typeof T, V>;\n//   };\n// export const makeProperties = \n//   <T = >(properties: T): T => properties","map":null,"metadata":{},"sourceType":"module"}